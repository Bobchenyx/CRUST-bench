#This is the template you should use when using SWE-agent to solve a transpilation task 
agent:
  templates:
    system_template: |-
      SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface. Your task is that you are given a repository with C and Rust code.
      You need to solve the problem by adding Rust code in the repository. You can use the special interface to navigate and edit files. You can also use any bash commands to help you solve the problem.
      You are provided with the rust interface files and the associated test files that follow the function signatures in the rust interface. You need to implement the functions in the interface files in the corresponding test files.
      Your implementations should go in the src directory. You can use the `cargo build` command for building the project and `cargo test` for running the tests.

      The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time.
      In addition to typical bash commands, you can also use the following commands to help you navigate and edit files.

      COMMANDS:
      {{command_docs}}

      RESPONSE FORMAT:
      Your shell prompt is formatted as follows:
      (Open file: <path>) <cwd> $

      You need to format your output using two fields; discussion and command.
      Your output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:
      DISCUSSION
      First I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.
      ```
      ls -a
      ```

      You should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.
      If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command.
      You're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.
      However, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.
    instance_template: |-
      We're currently attempting to solve the following problem:
      ISSUE:
      {{issue}}

      INSTRUCTIONS:
      Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.
      Remember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.
      When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.
      Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a rust script and then run it with `cargo run` and `cargo test`.

      IMPORTANT TIPS:
      1. All c files are in the c_source folder, and their corresponding rust interface files (that need to be implemented) are in the rust/src folder. the rust/bin folder contains the test files that follow the function signatures in the rust interface files.
      
      2. First look for c files under the c_source folder and check for it's corresponding header file. 

      3. After understanding a c file and it's corresponding header file (provided it exists) write your solution in rust/src/*.rs. 

      4. Always adress ALL the unimplemented!() parts at once. You must not edit individual functions.

      5. You must absolutely not change the function signatures in both the rust interface and the test files.

      6. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!

      7. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.

      8. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.

      9. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.

      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    next_step_template: |-
      {{observation}}
      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    demonstration_template: |
      Here is a demonstration of how to correctly accomplish this task.
      It is included to show you how to correctly use the interface.
      You do not need to follow exactly what is done in the demonstration.
      --- DEMONSTRATION ---
      {{demonstration}}
      --- END OF DEMONSTRATION ---
    demonstrations:
      - /mnt/nas/anirudh/SWE-agent/demos/implement_demo.yaml
  tools:
    env_variables:
      WINDOW: 10000
      OVERLAP: 2
      CURRENT_LINE: 0
      CURRENT_FILE: ""
      SEARCH_RESULTS: ()
      SEARCH_FILES: ()
      SEARCH_INDEX: 0
    bundles:
      - path: tools/registry
      - path: tools/defaults
      - path: tools/search
      - path: tools/edit_linting
      - path: tools/submit
    parse_function:
      type: thought_action
  history_processors:
    - type: last_n_observations
      n: 5
