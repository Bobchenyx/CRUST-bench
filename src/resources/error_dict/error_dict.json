{
    "E0463": "Crate not found.",
    "E0425": "Unresolved name used.",
    "E0599": "Unimplemented type on method",
    "E0133": "Unsafe code outside unsafe block.",
    "E0432": "Import Unresolved.",
    "E0530": "Binding shadowed.",
    "E0433": "Undeclared crate/module/type.",
    "E0308": "Expected type!=received type.",
    "E0412": "Used type name not in scope.",
    "E0255": "Can't import a value with name same as other value.",
    "E0605": "Invalid cast.",
    "E0601": "No `main` function found in binary crate.",
    "E0369": "Binary operation attempted on unsupported type.",
    "E0507": "Borrowed value moved out.",
    "E0596": "mutably borrow a non-mutable variable.",
    "E0609": "access nonexistent field.",
    "E0277": "Unimplemented trait in expected place.",
    "E0061": "Invalid number of args for function.",
    "E0658": "Unstable feature.",
    "E0506": "Assign to a borrowed value",
    "E0499": "Borrowed as mutable >1.",
    "E0502": "Already borrowed with a mutability, again with a different mutability.",
    "E0252": "Two items with same name cannot be imported without rebinding under a new local name.",
    "E0069": "function whose body contains a `return;` but return type is not `()`",
    "E0107": "An incorrect number of generic arguments was provided.",
    "E0583": "A file wasn't found for an out-of-line module.",
    "": "other errors",
    "null": "other errors",
    "E0254": "Attempt made to import an item, extern crate already imported.",
    "E0063": "A struct's or struct-like enum variant's field was not provided.",
    "E0621": "This error code indicates a mismatch between the lifetimes.",
    "E0716": "A temporary value is being dropped while a borrow is still in active use.",
    "E0106": "This error indicates that a lifetime is missing from a type.",
    "E0689": "A method was called on an ambiguous numeric type.",
    "E0597": "This error occurs because a value was dropped while it was still borrowed.  ",
    "E0382": "A variable was used after its contents have been moved elsewhere.  ",
    "E0282": "The compiler could not infer a type and asked for a type annotation.  ",
    "E0384": "An immutable variable was reassigned.  ",
    "E0015": "A non-`const` function was called in a `const` context.  ",
    "E0512": "Transmute with two differently sized types was attempted.  ",
    "E0606": "An incompatible cast was attempted.  ",
    "E0594": "A non-mutable value was assigned a value.  ",
    "E0505": "A value was moved out while it was still borrowed.  ",
    "E0515": "A reference to a local variable was returned.  ",
    "E0428": "A type or module has been defined more than once.  ",
    "E0283": "The compiler could not infer a type and asked for a type annotation.  ",
    "E0422": "An identifier that is neither defined nor a struct was used.  ",
    "E0225": "Multiple types were used as bounds for a closure or trait object.  ",
    "E0449": "A visibility qualifier was used where one is not permitted. Visibility qualifiers are not permitted on enum variants, trait items, impl blocks, and extern blocks, as they already share the visibility of the parent item.  Erroneous code examples:  ``` struct Bar;  trait Foo {     fn foo(); }  enum Baz {     pub Qux, // error: visibility qualifiers are not permitted here }  pub impl Bar {} // error: visibility qualifiers are not permitted here  pub impl Foo for Bar { // error: visibility qualifiers are not permitted here     pub fn foo() {} // error: visibility qualifiers are not permitted here } ```  To fix this error, simply remove the visibility qualifier. Example:  ``` struct Bar;  trait Foo {     fn foo(); }  enum Baz {     // Enum variants share the visibility of the enum they are in, so     // `pub` is not allowed here     Qux, }  // Directly implemented methods share the visibility of the type itself, // so `pub` is not allowed here impl Bar {}  // Trait methods share the visibility of the trait, so `pub` is not // allowed in either case impl Foo for Bar {     fn foo() {} } ``` ",
    "E0503": "A value was used after it was mutably borrowed.  ",
    "E0500": "A borrowed variable was used by a closure.  ",
    "E0307": "The `self` parameter in a method has an invalid \"receiver type\".  ",
    "E0616": "Attempted to access a private field on a struct.  ",
    "E0604": "A cast to `char` was attempted on a type other than `u8`.  ",
    "E0603": "A private item was used outside its scope.  ",
    "E0614": "Attempted to dereference a variable which cannot be dereferenced.  ",
    "E0381": "It is not allowed to use or capture an uninitialized variable.  ",
    "E0119": "There are conflicting trait implementations for the same type.  ",
    "E0624": "A private item was used outside of its scope.  ",
    "E0408": "An \"or\" pattern was used where the variable bindings are not consistently bound across patterns.  ",
    "E0424": "The `self` keyword was used inside of an associated function without a \"`self` receiver\" parameter.  ",
    "E0586": "An inclusive range was used with no end.  ",
    "E0423": "An identifier was used like a function name or a value was expected and the identifier exists but it belongs to a different namespace.  ",
    "E0191": "An associated type wasn't specified for a trait object.  ",
    "E0782": "Trait objects must include the `dyn` keyword.  ",
    "E0560": "An unknown field was specified into a structure.  ",
    "E0600": "An unary operator was used on a type which doesn't implement it.  ",
    "E0592": "This error occurs when you defined methods or associated functions with same name.  ",
    "E0451": "A struct constructor with private fields was invoked.  ",
    "E0405": "Trait not in scope.",
    "E0521": "Borrowed data escapes outside of closure.",
    "E0435": "A non-constant value was used in a constant expression.",
    "E0029": "Something other than numbers and characters has been used for a range.",
    "E0590": "break or continue keywords were used in a condition of a while loop without a label.",
    "E0261": "Undeclared lifetime used.",
    "E0508": "Value was moved out of fixed size array",
    "E0608": "An attempt to use index on a type which doesn't implement a trait" 
}